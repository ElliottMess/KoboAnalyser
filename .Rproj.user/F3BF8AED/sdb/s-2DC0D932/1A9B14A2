{
    "collab_server" : "",
    "contents" : "#' @name kobo_dico\n#' @rdname kobo_dico\n#' @title  Data dictionnary\n#'\n#' @description  Produce a data dictionnary based on the xlsform for the project\n#'\n#' @param form The full filename of the form to be accessed (xls or xlsx file).\n#' It is assumed that the form is stored in the data folder.\n#'\n#'\n#' @return A \"data.table\" with the full data dictionnary. To be used in the rest of the analysis.\n#'\n#' @author Edouard Legoupil, Elliott Messeiller\n#'\n#' @examples\n#' kobo_dico()\n#'\n#' @examples\n#' \\dontrun{\n#' kobo_dico()\n#' }\n#'\n#' @export kobo_dico\n#'\n\nkobo_dico <- function() {\n  source(\"code/0-config.R\")\n\n  # read the survey tab of ODK from\n  form_tmp <- paste0(\"data/\",form)\n\n  ###############################################################################################\n  ### First review all questions first\n  survey <- read_excel(form_tmp, sheet = \"survey\")\n\n  ## Rename the variable label\n  names(survey)[names(survey)==\"label::English\"] <- \"label\"\n  cat(\"Checking now for additional information within your xlsform. Note that you can insert them in the xls and re-run the function! \\n \\n \")\n\n  if(\"disaggregation\" %in% colnames(survey))\n  {\n  cat(\"Good: You have a column `disaggregation` in your survey worksheet.\\n\");\n  } else\n  {cat(\"No column `disaggregation` in your survey worksheet. Creating a dummy one for the moment...\\n\");\n    survey$disaggregation <- \"\"}\n\n\n  if(\"correlate\" %in% colnames(survey))\n  {\n    cat(\"Good: You have a column `correlate` in your survey worksheet. This will be used to define the variables that should be checked for correlation between each others.\\n\");\n  } else\n  {cat(\"No column `correlate` in your survey worksheet. Creating a dummy one for the moment...\\n\");\n    survey$correlate <- \"\"}\n\n  if(\"weight\" %in% colnames(survey))\n  {\n    cat(\"Good: You have a column `weight` in your survey worksheet. This will be used to breakdown the generated report\\n\");\n  } else\n  {cat(\"No column `weight` in your survey worksheet. Creating a dummy one for the moment ...\\n\");\n    survey$weight <- \"\"}\n\n  if(\"ordinal\" %in% colnames(survey))\n  {\n    cat(\"Good: You have a column `ordinal` in your survey worksheet. \\n\");\n  } else\n  {cat(\"No column `ordinal` in your survey worksheet. Creating a dummy one for the moment ...\\n\");\n    survey$ordinal <- \"\"}\n\n\n  ## Avoid columns without names\n  survey <- survey[ ,c(\"type\",\"name\",\"label\", \"disaggregation\", \"weight\",\"correlate\",\"ordinal\")]\n\n  ## need to delete empty rows from the form\n  survey <- as.data.frame(survey[!is.na(survey$type), ])\n\n  #str(survey)\n  #levels(as.factor(survey$type))\n\n  ### We can now extract the id of the list name to reconstruct the full label fo rthe question\n  cat(\" \\n Now extracting list name from questions type.\\n \\n\")\n  survey$listname <- \"\"\n\n  ## handle case where we have \"or_other\"\n  #survey$listname <- with(survey, ifelse(grepl(\"or_other\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  survey$listname) ,\n  #                                       paste0( substr(survey$listname , 1, (nchar(survey$listname)-8 ))),survey$listname))\n\n  ## handle case where we have \"or_other\"\n  survey$listname <- with(survey, ifelse(grepl(\"or_other\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  survey$listname) ,\n                                         paste0( substr(survey$listname , 1, (nchar(survey$listname)-8 ))),survey$listname))\n\n\n  ## Extract for select_one\n  survey$listname <- with(survey, ifelse(grepl(\"select_one\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  survey$type) ,\n                                         paste0( substr(survey$type , (regexpr(\"select_one\", survey$type , ignore.case=FALSE, fixed=TRUE))+10,250)),survey$listname))\n\n  survey$type <- with(survey, ifelse(grepl(\"select_one\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  survey$type), paste0(\"select_one\"),survey$type))\n\n  ## Extract for select multiple & clean type field\n  survey$listname <- with(survey,  ifelse(grepl(\"select_multiple\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  survey$type),\n                                          paste0( substr(survey$type , (regexpr(\"select_multiple\", survey$type , ignore.case=FALSE, fixed=TRUE))+16,250)),survey$listname ))\n\n\n  survey$type <- with(survey, ifelse(grepl(\"select_multiple\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  survey$type), paste0(\"select_multiple_d\"),survey$type))\n\n\n  ## Remove trailing space\n  survey$listname <- trim(survey$listname)\n  survey$label <- trim(survey$label)\n  #str(survey)\n\n  ### Get question levels in order to match the variable name\n  survey$qlevel <- \"\"\n  for(i in 2:nrow(survey))\n  {      if(survey[ i, c(\"type\")] ==\"begin group\" && survey[ i-1, c(\"qlevel\")]==\"\" )      {survey[ i, c(\"qlevel\")]  <-  \"level1\"}\n    else if(survey[ i, c(\"type\")] ==\"begin_group\" && survey[ i-1, c(\"qlevel\")]==\"\" )      {survey[ i, c(\"qlevel\")]  <-  \"level1\"}\n\n    else if(survey[ i, c(\"type\")] ==\"begin group\" && survey[ i-1, c(\"qlevel\")]==\"level1\") {survey[ i, c(\"qlevel\")]  <-  \"level2\"}\n    else if(survey[ i, c(\"type\")] ==\"begin_group\" && survey[ i-1, c(\"qlevel\")]==\"level1\") {survey[ i, c(\"qlevel\")]  <-  \"level2\"}\n\n    else if(survey[ i, c(\"type\")] ==\"begin group\" && survey[ i-1, c(\"qlevel\")]==\"level2\") {survey[ i, c(\"qlevel\")]  <-  \"level3\"}\n    else if(survey[ i, c(\"type\")] ==\"begin_group\" && survey[ i-1, c(\"qlevel\")]==\"level2\") {survey[ i, c(\"qlevel\")]  <-  \"level3\"}\n\n    else if(survey[ i, c(\"type\")] ==\"begin group\" && survey[ i-1, c(\"qlevel\")]==\"level3\") {survey[ i, c(\"qlevel\")]  <-  \"level4\"}\n    else if(survey[ i, c(\"type\")] ==\"begin_group\" && survey[ i-1, c(\"qlevel\")]==\"level3\") {survey[ i, c(\"qlevel\")]  <-  \"level4\"}\n\n    else if(survey[ i, c(\"type\")] ==\"begin group\" && survey[ i-1, c(\"qlevel\")]==\"level4\") {survey[ i, c(\"qlevel\")]  <-  \"level5\"}\n    else if(survey[ i, c(\"type\")] ==\"begin_group\" && survey[ i-1, c(\"qlevel\")]==\"level4\") {survey[ i, c(\"qlevel\")]  <-  \"level5\"}\n\n    ## Now end of group\n\n    else if(survey[ i, c(\"type\")] ==\"end group\" && survey[ i-1, c(\"qlevel\")]==\"level1\") {survey[ i, c(\"qlevel\")] <- \"\" }\n    else if(survey[ i, c(\"type\")] ==\"end_group\" && survey[ i-1, c(\"qlevel\")]==\"level1\") {survey[ i, c(\"qlevel\")] <- \"\" }\n\n    else if(survey[ i, c(\"type\")] ==\"end group\" && survey[ i-1, c(\"qlevel\")]==\"level2\") {survey[ i, c(\"qlevel\")]  <-  \"level1\"}\n    else if(survey[ i, c(\"type\")] ==\"end_group\" && survey[ i-1, c(\"qlevel\")]==\"level2\") {survey[ i, c(\"qlevel\")]  <-  \"level1\"}\n\n    else if(survey[ i, c(\"type\")] ==\"end group\" && survey[ i-1, c(\"qlevel\")]==\"level3\") {survey[ i, c(\"qlevel\")]  <-  \"level2\"}\n    else if(survey[ i, c(\"type\")] ==\"end_group\" && survey[ i-1, c(\"qlevel\")]==\"level3\") {survey[ i, c(\"qlevel\")]  <-  \"level2\"}\n\n    else if(survey[ i, c(\"type\")] ==\"end group\" && survey[ i-1, c(\"qlevel\")]==\"level4\") {survey[ i, c(\"qlevel\")]  <-  \"level3\"}\n    else if(survey[ i, c(\"type\")] ==\"end_group\" && survey[ i-1, c(\"qlevel\")]==\"level4\") {survey[ i, c(\"qlevel\")]  <-  \"level3\"}\n\n    else if(survey[ i, c(\"type\")] ==\"end group\" && survey[ i-1, c(\"qlevel\")]==\"level5\") {survey[ i, c(\"qlevel\")]  <-  \"level4\"}\n    else if(survey[ i, c(\"type\")] ==\"end_group\" && survey[ i-1, c(\"qlevel\")]==\"level5\") {survey[ i, c(\"qlevel\")]  <-  \"level4\"}\n\n    else   {survey[ i, c(\"qlevel\")]  <-  survey[ i-1, c(\"qlevel\")]}\n  }\n\n  ### Get question groups in order to match the variable name\n  ## Concatenation ofqlevel & qrepeat & type\n     survey$type2 <- survey$type\n     survey$type2[survey$type2 %in% c(\"begin_group\",\"begin group\",\"end_group\",\"end group\")]\n  ## We need to handle situation with both repeat & group\n  ## set <- as.data.frame(unique(dico[c(\"qlevel\",\"qrepeat\", \"type\")]))\n  ## So 12 cases to handle\n\n  cat(\" \\n Now rebuilding the variable full path in order to match with variable name from the exported dataset. \\n\n      Note that there should not be any dots in the orginal variables. \\n\n      Double Check as well there's no duplicate for the name column in the survey worksheet\\n \\n\")\n  survey$qgroup <- \"\"\n  for(i in 2:nrow(survey))\n  {\n    #i <- 54\n    #i <- 20\n    #survey[ 113, c(\"qgroup\")]\n            if(survey[ i, c(\"qlevel\")]  %in% c(\"level1\",\"level2\",\"level3\",\"level4\",\"level5\") &&\n              !(survey[ i, c(\"type\")]   %in% c(\"begin_group\",\"begin group\",\"end_group\",\"end group\",\"begin_repeat\",\"begin repeat\",\"end_repeat\",\"end repeat\")) )\n\n      {survey[ i, c(\"qgroup\")] <- survey[ i-1, c(\"qgroup\")]\n\n\n    } else if(survey[ i, c(\"qlevel\")]   %in% c(\"level1\") &&\n              survey[ i, c(\"type\")]     %in% c(\"begin_group\",\"begin group\")  )\n\n       {survey[ i, c(\"qgroup\")] <- survey[ i, c(\"name\")]\n\n    } else if(survey[ i, c(\"qlevel\")]   %in% c(\"level2\",\"level3\",\"level4\",\"level5\") &&\n              survey[ i, c(\"type\")]     %in% c(\"begin_group\",\"begin group\") )\n\n       {survey[ i, c(\"qgroup\")] <- paste(survey[ i-1, c(\"qgroup\")], survey[ i, c(\"name\")],sep=\".\")\n\n    } else if(survey[ i, c(\"qlevel\")]   %in% c(\"level1\",\"level2\",\"level3\",\"level4\",\"level5\")  &&\n              survey[ i, c(\"type\")]     %in% c(\"begin_repeat\",\"begin repeat\")   )\n\n      {survey[ i, c(\"qgroup\")] <- paste(survey[ i-1, c(\"qgroup\")], survey[ i, c(\"qrepeatlabel\")],sep=\".\")\n\n    } else if(survey[ i, c(\"qlevel\")]   %in% c(\"level1\",\"level2\",\"level3\",\"level4\",\"level5\") &&\n              survey[ i, c(\"type\")]     %in% c(\"end_group\",\"end group\",\"end_repeat\",\"end repeat\") )\n\n       {survey[ i, c(\"qgroup\")] <- substr(survey[ i-1, c(\"qgroup\")] ,0, regexpr(\"\\\\.[^\\\\.]*$\", survey[ i-1, c(\"qgroup\")] )-1)\n\n    } else  {survey[ i, c(\"qgroup\")]  <- \"\"}\n  }\n\n\n\n\n  survey$fullname <- \"\"\n  ## levels(as.factor(survey$type))\n  ## Need to loop around the data frame in order to concatenate full name as observed in data dump\n  survey[ 1, c(\"fullname\")]  <-  survey[ 1, c(\"name\")]\n  for(i in 2:nrow(survey))\n  {\n    if(survey[ i, c(\"qlevel\")] ==\"\") {survey[ i, c(\"fullname\")]  <-  survey[ i, c(\"name\")]}\n    else {survey[ i, c(\"fullname\")]  <-  paste(survey[ i, c(\"qgroup\")],survey[ i, c(\"name\")],sep=\".\") }\n  }\n\n  ## a few colummns to adjust to match questions & choices\n  survey$labelchoice <- survey$label\n\n  #############################################################################################################\n  #### Now looking at choices --\n  #rm(choices)\n  choices <- read_excel(form_tmp, sheet = \"choices\")\n  names(choices)[names(choices)==\"label::English\"] <- \"label\"\n  names(choices)[names(choices)==\"list name\"] <- \"listname\"\n  names(choices)[names(choices)==\"list_name\"] <- \"listname\"\n\n  ## Remove trailing space\n  choices$listname <- trim(choices$listname)\n  choices$label <- trim(choices$label)\n\n\n  choices <- choices[,c(\"listname\",  \"name\",  \"label\")]\n  names(choices)[names(choices)==\"label\"] <- \"labelchoice\"\n  #rm(choices)\n  choices <- join(x=choices, y=survey, by=\"listname\", type=\"left\")\n\n  choices$type <- with(choices, ifelse(grepl(\"select_one\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  choices$type),\n                                       paste0(\"select_one_d\"),choices$type))\n\n  choices$type <- with(choices, ifelse(grepl(\"select_multiple_d\", ignore.case = TRUE, fixed = FALSE, useBytes = FALSE,  choices$type),\n                                       paste0(\"select_multiple\"),choices$type))\n\n\n  names(choices)[9] <- \"nameq\"\n  names(choices)[10] <- \"labelq\"\n  choices$labelfull <- paste0(choices$labelq, sep = \": \", choices$labelchoice)\n  choices$namefull <- paste0(choices$fullname, sep = \".\", choices$name)\n  choices$correlate <-\"\"\n  choices$ordinal <-\"\"\n\n  #############################################################################################################\n  #### Now Row bing questions & choices\n\n  choices2 <- choices[ ,c(\"type\", \"name\", \"namefull\", \"labelfull\", \"disaggregation\",\"correlate\", \"listname\", \"qlevel\", \"qgroup\", \"labelchoice\",\"ordinal\",\"weight\")]\n\n\n  names(choices2)[names(choices2)==\"namefull\"] <- \"fullname\"\n  names(choices2)[names(choices2)==\"labelfull\"] <- \"label\"\n\n\n  survey2 <-    survey[,c(\"type\", \"name\",  \"fullname\", \"label\", \"disaggregation\",\"correlate\",\"listname\",\"qlevel\", \"qgroup\", \"labelchoice\",\"ordinal\",\"weight\")]\n\n  survey2$formpart <- \"questions\"\n  choices2$formpart <- \"answers\"\n\n  dico <- rbind(survey2,choices2)\n\n\n  ## Remove trailing space\n  dico$fullname <- trim(dico$fullname)\n  dico$listname <- trim(dico$listname)\n\n\n  ## A few fix on the dico\n  dico <- dico[ !is.na(dico$name), ]\n  dico <- dico[ !is.na(dico$type), ]\n\n  write.csv(dico, paste0(\"data/dico_\",form,\".csv\"), row.names=FALSE, na = \"\")\n  path.to.dico <- paste0(\"data/dico_\",form,\".csv\")\n\n # f_csv(dico)\n#  return(dico)\ncat(\"\\n\")\ncat(\"\\n\")\ncat(\"\\n\")\ncat(\"###########################################################################\\n\")\ncat(\"# Your dictionnary was created, now the data and forms are linked.        #\\n\")\ncat(\"# You can found it in the data directory.                                 #\\n\")\ncat(\"#                                                                         #\\n\")\ncat(\"# To continue the analysis you can:                                       #\\n\")\ncat(\"#      1. Run kobo_bar_one() for graphs of select_one questions           #\\n\")\ncat(\"#      2. Run kobo_bar_multi() for graphs of select_multiple questions    #\\n\")\ncat(\"#      3. Run kobo_histo() for historgrams of integer questions           #\\n\")\ncat(\"#      4. Run kobo_correlation() for the correlations planned             #\\n\")\ncat(\"#                                                                         #\\n\")\ncat(\"#  If you are not sure what to do, run kobo_analysis()                    #\\n\")\ncat(\"###########################################################################\\n\")\n\n\n#Fetching the directory\nmainDir <- getwd()\n#Path to file\nconfigfile<-paste(mainDir,\"/code/0-config.R\",sep=\"\")\n#Writting file\nsink(configfile,append=TRUE)\ncat(\"\\n ### Name of the dictionnary: \\n\")\n\ncat(paste('path.to.dico <- paste(\"data/dico_',form,'.csv\",sep=\"\") \\n',sep=\"\"))\ncat(\"\\n\")\ncat(paste('dico <- read.csv(\"',path.to.dico,'\", sep=\",\") \\n',sep = \"\"))\n\nsink()\n\n}\nNULL\n\n",
    "created" : 1519303654234.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "652967692",
    "id" : "1A9B14A2",
    "lastKnownWriteTime" : 1518441054,
    "last_content_update" : 1518441054,
    "path" : "~/ACTED Afghanistan/8. AME/1. Guidelines and tools/11. Kobo/KoboAnalyser/KoboAnalyser/R/kobo_dico.R",
    "project_path" : "R/kobo_dico.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}